### web
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/job-admin
### mybatis
mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml
mybatis.type-aliases-package=com.xxl.job.admin.core.model
### xxl-job, datasource  ${MYSQL_ADDR:192.168.3.20}:${MYSQL_PORT:3306}/${MYSQL_DB:xxl-job}
#spring.datasource.url=jdbc:mysql://${MYSQL_ADDR:192.168.3.20}:${MYSQL_PORT:3306}/${MYSQL_DB:xxl-job}?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai&useSSL=false
#spring.datasource.username=${MYSQL_USER:root}
#spring.datasource.password=${MYSQL_PWD:123456}
spring.datasource.url=jdbc:mysql://${MYSQL_ADDR:121.36.147.52}:${MYSQL_PORT:20001}/${MYSQL_DB:xxl_job}?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai&useSSL=false&allowMultiQueries=true
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PWD:F65000b8f11d}
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
### datasource-pool
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.maximum-pool-size=8
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=HikariCP
spring.datasource.hikari.max-lifetime=900000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=3000
### xxl-job, email
spring.mail.host=${MAIL_HOST:smtp.163.com}
spring.mail.port=${MAIL_PORT:465}
spring.mail.username=${MAIL_USER:sdliangi@163.com}
spring.mail.from=${MAIL_FROM:sdliangi@163.com}
spring.mail.password=${MAIL_PWD:EBXPBFNGRLRHZBSK}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
### xxl-job, access token
xxl.job.accessToken=${ACCESS_TOKEN:qwertyuiop123qwer}
### xxl-job, i18n (default is zh_CN, and you can choose "zh_CN", "zh_TC" and "en")
xxl.job.i18n=zh_CN
## xxl-job, triggerpool max size
xxl.job.triggerpool.fast.max=${FAST_MAX:800}
xxl.job.triggerpool.slow.max=${SLOW_MAX:100}
### xxl-job, log retention days
xxl.job.logretentiondays=30
# http://authservice.gateway:18080
auth.server.addr=${AUTH_SERVER_ADDR:http://192.168.3.13:30001}
spring.redis.sentinel.master=mymaster
spring.redis.sentinel.nodes=192.168.3.17:26379,192.168.3.19:26379,192.168.3.20:26379
### ========================================kafka配置=============================================================
###########【Kafka集群】###########
spring.kafka.bootstrap-servers=${KAFKA_SERVER:192.168.3.17:9092,192.168.3.19:9092,192.168.3.20:9092}
###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 批量大小
spring.kafka.producer.batch-size=16384
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
# 生产端缓冲区大小
spring.kafka.producer.buffer-memory=33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 自定义分区器
# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
###########【初始化消费者配置】###########
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50